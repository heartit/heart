{
  "language": "Solidity",
  "sources": {
    "contracts/Heart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ncontract Heart {\n    event BeatAdded();\n    address public owner;\n\n    struct Beat {\n        string data;\n        address addr;\n        uint256 rhythm;\n        uint256 goalRhythm;\n    }\n\n    mapping(string => Beat[]) dataToBeat;\n    Beat[] public beats;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function addBeat(string memory _data, uint256 _rhythm) public {\n        require(_rhythm >= 0 && _rhythm <= 100000000, \"[ERR]\");\n\n        dataToBeat[_data].push(\n            Beat({\n                data: _data,\n                addr: msg.sender,\n                rhythm: _rhythm,\n                goalRhythm: 0\n            })\n        );\n\n        beats.push(\n            Beat({\n                data: _data,\n                addr: msg.sender,\n                rhythm: _rhythm,\n                goalRhythm: 0\n            })\n        );\n\n        emit BeatAdded();\n    }\n\n    function reward(Beat[] memory _beats) external payable {\n        require(msg.value > 0, \"[ERR] Message value is not positive.\");\n        require(_beats.length > 0, \"[ERR] Requires an array of Beats.\");\n\n        uint256 signleReward = msg.value / _beats.length;\n\n        for (uint256 i = 0; i < _beats.length; i++) {\n            (bool sent, ) = _beats[i].addr.call{value: signleReward}(\"\");\n            require(sent, \"[ERR] ETH tranfer failed.\");\n        }\n    }\n\n    function getBeats(\n        string memory _data\n    ) external view returns (Beat[] memory) {\n        return dataToBeat[_data];\n    }\n\n    function getAllBeats() external view returns (Beat[] memory) {\n        return beats;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}